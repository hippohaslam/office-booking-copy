# Comprehensive GitHub Actions workflow for building, testing, and deploying a .NET and React application to AWS.
# This workflow is generated based on the provided project structure and file contents.
# It includes jobs for building, unit testing, integration testing, E2E testing, infrastructure provisioning with Terraform,
# and application deployment to AWS Elastic Beanstalk and AWS Amplify.

name: Build, Test, and Deploy Hippo Booking

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - 'Test'
          - 'Production'

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  API_PROJECT_PATH: 'src/api/Hippo.Booking.API/Hippo.Booking.API.csproj'
  API_OUTPUT_PATH: 'api-publish'
  FRONTEND_PROJECT_PATH: 'src/web/hippo-booking'
  SOLUTION_PATH: 'src/hippo-booking.sln'

permissions:
  id-token: write
  contents: read

jobs:
  build-dotnet:
    name: Build .NET API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Build .NET application
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Publish .NET API
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --output ${{ env.API_OUTPUT_PATH }}

      - name: Zip API artifact
        run: zip -r api-artifact.zip ./${{ env.API_OUTPUT_PATH }}

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-artifact
          path: api-artifact.zip

  build-frontend:
    name: Build Frontend Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ${{ env.FRONTEND_PROJECT_PATH }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('${{ env.FRONTEND_PROJECT_PATH }}/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Enable Corepack
        run: corepack enable

      - name: Install frontend dependencies
        run: yarn install --immutable
        working-directory: ${{ env.FRONTEND_PROJECT_PATH }}

      - name: Build frontend application
        run: yarn build
        working-directory: ${{ env.FRONTEND_PROJECT_PATH }}

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: ${{ env.FRONTEND_PROJECT_PATH }}/dist

  unit-tests:
    name: Run .NET Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Build .NET projects for testing
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Run Core unit tests
        run: dotnet test src/api/tests/Hippo.Booking.Core.Tests/Hippo.Booking.Core.Tests.csproj --configuration Release

      - name: Run Application unit tests
        run: dotnet test src/api/tests/Hippo.Booking.Application.Tests/Hippo.Booking.Application.Tests.csproj --configuration Release

      - name: Run Infrastructure unit tests
        run: dotnet test src/api/tests/Hippo.Booking.Infrastructure.Tests/Hippo.Booking.Infrastructure.Tests.csproj --configuration Release

  frontend-tests:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Canvas dependencies
        # These are required by the canvas package for vitest, as noted in src/web/hippo-booking/README.md
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ${{ env.FRONTEND_PROJECT_PATH }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('${{ env.FRONTEND_PROJECT_PATH }}/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Enable Corepack
        # Required as per package.json packageManager field
        run: corepack enable

      - name: Install frontend dependencies
        run: yarn install --immutable
        working-directory: ${{ env.FRONTEND_PROJECT_PATH }}

      - name: Run frontend unit/CI tests
        run: yarn ci-test
        working-directory: ${{ env.FRONTEND_PROJECT_PATH }}

  integration-tests:
    name: Run .NET Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: HippoBooking_Integration
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d HippoBooking_Integration"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Build .NET projects for testing
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Run integration tests
        run: dotnet test src/api/tests/Hippo.Booking.Integration.Tests/Hippo.Booking.Integration.Tests.csproj --configuration Release
        env:
          ConnectionStrings__HippoBookingDbContext: "Server=localhost;Port=5432;Database=HippoBooking_Integration;User Id=postgres;Password=postgres;"

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-
      
      - name: Start services with Docker Compose
        # The --wait flag is critical. It requires that the services being waited on
        # (booking-api, which depends on postgres) have a healthcheck defined in their respective docker-compose files.
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml -f src/infrastructure/docker/docker-compose-services.yml up --build -d --wait

      - name: Verify running containers
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml -f src/infrastructure/docker/docker-compose-services.yml ps

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode
      
      - name: Install Playwright browsers
        # Build the E2E test project to trigger the automatic download of Playwright browsers.
        run: dotnet build src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj

      - name: Run E2E tests
        run: dotnet test src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj --configuration Release

  provision-and-deploy:
    name: Provision Infrastructure and Deploy
    runs-on: ubuntu-latest
    needs: [build-dotnet, build-frontend, unit-tests, frontend-tests, integration-tests, e2e-tests]
    if: github.event.inputs.environment == 'Test' || github.event.inputs.environment == 'Production'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: src/infrastructure/terraform
        env:
          AWS_BUCKET_NAME: 'hippo-booking-terraform'
          AWS_BUCKET_KEY: 'terraform.${{ github.event.inputs.environment }}.tfstate'
          AWS_REGION: 'eu-west-1'
          TF_INPUT: false
          # Override backend config with environment variables
          TF_CLI_ARGS_init: >
            -backend-config="bucket=${AWS_BUCKET_NAME}"
            -backend-config="key=${AWS_BUCKET_KEY}"
            -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: src/infrastructure/terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="${{ github.event.inputs.environment }}.tfvars" -out=tfplan
        working-directory: src/infrastructure/terraform
        env:
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_slack_token: ${{ secrets.SLACK_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.SLACK_SIGNING_SECRET }}
          TF_VAR_github_repo: ${{ github.repository }}
          TF_VAR_github_access_token: ${{ secrets.AMPLIFY_GITHUB_TOKEN }}
          TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_slack_channel_email: ${{ secrets.SLACK_CHANNEL_EMAIL }}
          TF_INPUT: false

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        working-directory: src/infrastructure/terraform

      - name: Get Terraform Outputs
        id: tf-outputs
        run: terraform output -json > tf-outputs.json
        working-directory: src/infrastructure/terraform

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Parse Terraform Outputs
        id: parse-outputs
        run: |
          echo "EB_APP_NAME=$(jq -r '.elastic_beanstalk_application_name.value' src/infrastructure/terraform/tf-outputs.json)" >> $GITHUB_ENV
          echo "EB_ENV_NAME=$(jq -r '.elastic_beanstalk_environment_name.value' src/infrastructure/terraform/tf-outputs.json)" >> $GITHUB_ENV
          echo "AMPLIFY_APP_NAME=$(jq -r '.amplify_app_name.value' src/infrastructure/terraform/tf-outputs.json)" >> $GITHUB_ENV
          echo "AMPLIFY_APP_ID=$(aws amplify list-apps --query "apps[?name=='$(jq -r '.amplify_app_name.value' src/infrastructure/terraform/tf-outputs.json)'].appId" --output text)" >> $GITHUB_ENV

      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: api-artifact
          path: .

      - name: Unzip API artifact
        run: unzip api-artifact.zip

      - name: Deploy to AWS Elastic Beanstalk
        id: deploy-eb
        run: |
          VERSION_LABEL="v-${{ github.sha }}-${{ github.run_id }}"
          aws elasticbeanstalk create-application-version --application-name "${{ env.EB_APP_NAME }}" --version-label "${VERSION_LABEL}" --source-bundle S3Bucket="${{ env.EB_APP_NAME }}-codepipeline-artifacts",S3Key="api-artifact.zip"
          aws s3 cp api-artifact.zip s3://${{ env.EB_APP_NAME }}-codepipeline-artifacts/api-artifact.zip
          aws elasticbeanstalk update-environment --application-name "${{ env.EB_APP_NAME }}" --environment-name "${{ env.EB_ENV_NAME }}" --version-label "${VERSION_LABEL}"
          echo "Waiting for Elastic Beanstalk deployment to complete..."
          aws elasticbeanstalk wait environment-updated --application-name "${{ env.EB_APP_NAME }}" --environment-name "${{ env.EB_ENV_NAME }}"

      - name: Deploy to AWS Amplify
        id: deploy-amplify
        run: |
          aws amplify start-job --app-id ${{ env.AMPLIFY_APP_ID }} --branch-name main --job-type RELEASE
          echo "Amplify deployment started. Check the AWS Amplify console for status."
