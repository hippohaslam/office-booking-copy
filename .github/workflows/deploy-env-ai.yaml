name: .NET and React CI/CD with AWS Deployment

# Workflow Trigger and Permissions
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Test
          - Production

permissions:
  id-token: write # Required for authenticating to AWS with OIDC
  contents: read  # Required to checkout the repository

# Workflow Inputs and Environment Variables
env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  AWS_REGION: 'eu-west-1'
  API_PROJECT_PATH: 'src/api/Hippo.Booking.API/Hippo.Booking.API.csproj'
  SOLUTION_FILE_PATH: 'src/hippo-booking.sln'
  WEB_PROJECT_PATH: 'src/web/hippo-booking'
  INFRA_PATH: 'src/infrastructure'
  API_ARTIFACT_NAME: 'api-release'
  WEB_ARTIFACT_NAME: 'web-release'

jobs:
  build-and-package:
    name: Build & Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }} --locked-mode

      - name: Build .NET solution
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore

      - name: Publish .NET API
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --output ./api-publish

      - name: Generate deployment package for API
        run: cd ./api-publish && zip -r ../${{ env.API_ARTIFACT_NAME }}.zip .

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ env.API_ARTIFACT_NAME }}.zip

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js (Yarn) dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.WEB_PROJECT_PATH }}/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}/yarn.lock', env.WEB_PROJECT_PATH)) }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Enable Corepack
        run: corepack enable

      - name: Install Frontend dependencies
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: yarn install --immutable

      - name: Set Frontend Build Command
        id: set_build_cmd
        run: |
          if [ "${{ github.event.inputs.environment }}" == "Production" ]; then
            echo "build_command=yarn build:prod" >> $GITHUB_ENV
          else
            echo "build_command=yarn build:test" >> $GITHUB_ENV
          fi

      - name: Build Frontend application
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: ${{ env.build_command }}

      - name: Generate deployment package for Frontend
        run: zip -r ${{ env.WEB_ARTIFACT_NAME }}.zip ${{ env.WEB_PROJECT_PATH }}/dist

      - name: Upload Frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WEB_ARTIFACT_NAME }}
          path: ${{ env.WEB_ARTIFACT_NAME }}.zip

      - name: Set version output
        id: version
        run: echo "version=${{ github.sha }}-${{ github.run_number }}" >> $GITHUB_OUTPUT

  unit-tests:
    name: Unit Tests
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }} --locked-mode

      - name: Build .NET solution
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore

      - name: Run .NET Unit Tests
        run: |
          dotnet test src/api/tests/Hippo.Booking.Application.Tests/Hippo.Booking.Application.Tests.csproj --configuration Release
          dotnet test src/api/tests/Hippo.Booking.Core.Tests/Hippo.Booking.Core.Tests.csproj --configuration Release
          dotnet test src/api/tests/Hippo.Booking.Infrastructure.Tests/Hippo.Booking.Infrastructure.Tests.csproj --configuration Release

  integration-tests:
    name: Integration Tests
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start PostgreSQL container
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml up --wait

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }} --locked-mode

      - name: Build .NET solution
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore

      - name: Run .NET Integration Tests
        env:
          ConnectionStrings__HippoBookingDbContext: "Server=localhost;Port=5432;Database=HippoBooking_Integration;User Id=postgres;Password=postgres;TrustServerCertificate=True"
        run: dotnet test src/api/tests/Hippo.Booking.Integration.Tests/Hippo.Booking.Integration.Tests.csproj --configuration Release

  frontend-tests:
    name: Frontend Tests
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js (Yarn) dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.WEB_PROJECT_PATH }}/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}/yarn.lock', env.WEB_PROJECT_PATH)) }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Enable Corepack
        run: corepack enable

      - name: Install Frontend dependencies
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: yarn install --immutable

      - name: Run Frontend CI tests
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: yarn ci-test

  e2e-tests:
    name: End-to-End Tests
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start Application Stack
        # The --wait flag requires that the services being waited upon (e.g., booking-api)
        # have a dependency with `condition: service_healthy` and the target service (e.g., postgres)
        # has a `healthcheck` defined in the docker-compose file.
        run: |
          docker compose -f src/infrastructure/docker/docker-compose-ci.yml -f src/infrastructure/docker/docker-compose-services.yml up -d --wait
          docker compose -f src/infrastructure/docker/docker-compose-ci.yml -f src/infrastructure/docker/docker-compose-services.yml ps

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }} --locked-mode

      - name: Build .NET solution
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore

      - name: Run E2E tests
        run: dotnet test src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj --configuration Release

  provision-and-deploy:
    name: Provision and Deploy
    needs: [unit-tests, integration-tests, frontend-tests, e2e-tests, build-and-package]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install required tools
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Terraform Init
        id: init
        working-directory: ${{ env.INFRA_PATH }}/terraform
        run: terraform init -backend-config="bucket=office-booking-tf-state-eu-west-1" -backend-config="key=terraform.${{ github.event.inputs.environment }}.tfstate" -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.INFRA_PATH }}/terraform
        run: terraform plan -var-file="${{ github.event.inputs.environment }}.tfvars" -out=tfplan
        env:
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_slack_token: ${{ secrets.SLACK_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.SLACK_SIGNING_SECRET }}
          TF_VAR_github_access_token: ${{ secrets.GH_ACCESS_TOKEN_FOR_AMPLIFY }}
          TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_github_repo: 'https://github.com/${{ github.repository }}.git'
          TF_VAR_slack_channel_email: ${{ secrets.SLACK_CHANNEL_EMAIL }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.INFRA_PATH }}/terraform
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: ${{ env.INFRA_PATH }}/terraform
        run: |
          terraform output -json > tf_outputs.json
          echo "eb_app_name=$(jq -r .elastic_beanstalk_application_name.value tf_outputs.json)" >> $GITHUB_ENV
          echo "eb_env_name=$(jq -r .elastic_beanstalk_environment_name.value tf_outputs.json)" >> $GITHUB_ENV
          echo "amplify_app_name=$(jq -r .amplify_app_name.value tf_outputs.json)" >> $GITHUB_ENV
          echo "eb_bucket=$(jq -r .elastic_beanstalk_bucket.value tf_outputs.json)" >> $GITHUB_ENV

      - name: Wait for Elastic Beanstalk Environment to be Ready
        run: |
          aws elasticbeanstalk wait environment-updated \
            --environment-name ${{ env.eb_env_name }} \
            --region ${{ env.AWS_REGION }}

      - name: Download API Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}

      - name: Deploy API to Elastic Beanstalk
        env:
          EB_BUCKET: elasticbeanstalk-${{ env.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          VERSION_LABEL="${{ needs.build-and-package.outputs.version }}-${{ github.run_attempt }}"
          aws s3 cp ${{ env.API_ARTIFACT_NAME }}.zip s3://${EB_BUCKET}/${{ env.eb_app_name }}/${VERSION_LABEL}.zip
          aws elasticbeanstalk create-application-version --application-name "${{ env.eb_app_name }}" --version-label "${VERSION_LABEL}" --source-bundle S3Bucket="${EB_BUCKET}",S3Key="${{ env.eb_app_name }}/${VERSION_LABEL}.zip"
          aws elasticbeanstalk update-environment --environment-name "${{ env.eb_env_name }}" --version-label "${VERSION_LABEL}"

      - name: Trigger Frontend deployment on Amplify
        run: |
          for i in {1..12}; do
            APP_ID=$(aws amplify list-apps --query "apps[?name=='${{ env.amplify_app_name }}'].appId" --output text)
            if [ -n "$APP_ID" ]; then
              echo "Found Amplify App ID: $APP_ID"
              break
            fi
            echo "Attempt $i/12: Amplify app not found, waiting 15 seconds..."
            sleep 15
          done

          if [ -z "$APP_ID" ]; then
            echo "Error: Timed out waiting for Amplify App ID."
            exit 1
          fi

          aws amplify start-job --app-id $APP_ID --branch-name main --job-type MANUAL