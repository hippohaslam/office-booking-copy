name: Hippo Booking CI/CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - Test
          - Production

permissions:
  id-token: write # Required for AWS OIDC
  contents: read  # Required to checkout the repository

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  AWS_REGION: 'eu-west-1'
  SOLUTION_PATH: 'src/hippo-booking.sln'
  API_PROJECT_PATH: 'src/api/Hippo.Booking.API/Hippo.Booking.API.csproj'
  WEB_APP_PATH: 'src/web/hippo-booking'
  API_PUBLISH_PATH: './api-publish'
  API_ARTIFACT_NAME: 'api-artifact'
  TF_ARTIFACT_NAME: 'tf-output'
  TF_WORKING_DIR: 'src/infrastructure/terraform'

jobs:
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    outputs:
      version_label: ${{ steps.version.outputs.label }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Build .NET solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '${{ env.WEB_APP_PATH }}/yarn.lock'

      - name: Build Frontend
        working-directory: ${{ env.WEB_APP_PATH }}
        run: |
          corepack enable
          yarn install --immutable
          yarn build

      - name: Publish .NET API
        run: dotnet publish ${{ env.API_PROJECT_PATH }} -c Release -o ${{ env.API_PUBLISH_PATH }}

      - name: Generate version label
        id: version
        run: echo "label=v-$(echo ${{ github.sha }} | cut -c1-8)-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Zip API artifact for deployment
        run: |
          cd ${{ env.API_PUBLISH_PATH }}
          zip -r ../${{ env.API_ARTIFACT_NAME }}.zip .

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ env.API_ARTIFACT_NAME }}.zip

  run-unit-tests:
    name: Unit & Frontend Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Run .NET Unit Tests
        run: |
          dotnet test src/api/tests/Hippo.Booking.Core.Tests/Hippo.Booking.Core.Tests.csproj --no-build --configuration Release
          dotnet test src/api/tests/Hippo.Booking.Application.Tests/Hippo.Booking.Application.Tests.csproj --no-build --configuration Release
          dotnet test src/api/tests/Hippo.Booking.Infrastructure.Tests/Hippo.Booking.Infrastructure.Tests.csproj --no-build --configuration Release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '${{ env.WEB_APP_PATH }}/yarn.lock'

      - name: Run Frontend Tests
        working-directory: ${{ env.WEB_APP_PATH }}
        run: |
          corepack enable
          yarn install --immutable
          yarn ci-test

  run-integration-tests:
    name: Integration Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start services
        working-directory: src/infrastructure/docker
        run: docker compose -f docker-compose-ci.yml up -d

      - name: Wait for PostgreSQL to be healthy
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60s bash -c 'until docker ps | grep "hippo-booking-postgres-1" | grep -q "(healthy)"; do sleep 2; done'
          echo "PostgreSQL is ready."

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Run .NET Integration Tests
        env:
          ConnectionStrings__HippoBookingDbContext: "Host=localhost;Port=5432;Database=HippoBooking_Integration;Username=postgres;Password=postgres"
        run: dotnet test src/api/tests/Hippo.Booking.Integration.Tests/Hippo.Booking.Integration.Tests.csproj --no-build --configuration Release

      - name: Stop services
        if: always()
        working-directory: src/infrastructure/docker
        run: docker compose -f docker-compose-ci.yml down

  run-e2e-tests:
    name: End-to-End Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start full application stack
        working-directory: src/infrastructure/docker
        run: >
          docker compose
          -f docker-compose-ci.yml
          -f docker-compose-services.yml
          up --build -d

      - name: Wait for API to be healthy
        run: |
          echo "Waiting for API service..."
          timeout 120s bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://localhost:7249/health | grep -q "200"; do sleep 5; done'
          echo "API is ready."

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Run E2E Tests
        run: dotnet test src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj --no-build --configuration Release

      - name: Stop services
        if: always()
        working-directory: src/infrastructure/docker
        run: >
          docker compose
          -f docker-compose-ci.yml
          -f docker-compose-services.yml
          down

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [run-unit-tests, run-integration-tests, run-e2e-tests]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=tf-state/${{ github.event.inputs.environment }}.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: >
          terraform apply -auto-approve
          -var-file="${{ github.event.inputs.environment }}.tfvars"
          -var="github_repo=${{ github.repository }}"
          -var="github_access_token=${{ secrets.AMPLIFY_GITHUB_TOKEN }}"
          -var="google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}"
          -var="google_credentials=${{ secrets.GOOGLE_CREDENTIALS }}"
          -var="slack_token=${{ secrets.SLACK_TOKEN }}"
          -var="slack_signing_secret=${{ secrets.SLACK_SIGNING_SECRET }}"
          -var="slack_channel_email=${{ secrets.SLACK_CHANNEL_EMAIL }}"

      - name: Save Terraform Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform output -json > ${{ env.TF_ARTIFACT_NAME }}.json

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TF_ARTIFACT_NAME }}
          path: ${{ env.TF_WORKING_DIR }}/${{ env.TF_ARTIFACT_NAME }}.json

  deploy-application:
    name: Deploy Application
    needs: [build, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TF_ARTIFACT_NAME }}

      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Parse Terraform outputs
        id: tf-outputs
        run: |
          echo "eb_app_name=$(jq -r '.elastic_beanstalk_application_name.value' ${{ env.TF_ARTIFACT_NAME }}.json)" >> $GITHUB_OUTPUT
          echo "eb_env_name=$(jq -r '.elastic_beanstalk_environment_name.value' ${{ env.TF_ARTIFACT_NAME }}.json)" >> $GITHUB_OUTPUT
          echo "amplify_app_id=$(jq -r '.amplify_app_id.value' ${{ env.TF_ARTIFACT_NAME }}.json)" >> $GITHUB_OUTPUT

      - name: Deploy API to Elastic Beanstalk
        run: |
          VERSION_LABEL="${{ needs.build.outputs.version_label }}"
          EB_APP_NAME="${{ steps.tf-outputs.outputs.eb_app_name }}"
          EB_ENV_NAME="${{ steps.tf-outputs.outputs.eb_env_name }}"
          S3_BUCKET="${{ secrets.EB_ARTIFACTS_BUCKET }}"
          S3_KEY="$EB_APP_NAME/$VERSION_LABEL.zip"

          echo "Uploading to s3://$S3_BUCKET/$S3_KEY"
          aws s3 cp ${{ env.API_ARTIFACT_NAME }}.zip s3://$S3_BUCKET/$S3_KEY

          echo "Creating new application version: $VERSION_LABEL"
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP_NAME" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="$S3_BUCKET",S3Key="$S3_KEY"

          echo "Updating environment: $EB_ENV_NAME"
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV_NAME" \
            --version-label "$VERSION_LABEL"

      - name: Deploy Frontend to Amplify
        run: |
          AMPLIFY_APP_ID="${{ steps.tf-outputs.outputs.amplify_app_id }}"
          echo "Starting Amplify deployment for app ID: $AMPLIFY_APP_ID"
          aws amplify start-job --app-id "$AMPLIFY_APP_ID" --branch-name "main" --job-type "RELEASE"
