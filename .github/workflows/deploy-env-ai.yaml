name: Build, Test, and Deploy Hippo Booking

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - Test
          - Production
        default: 'Test'

permissions:
  id-token: write # Required for authenticating to AWS with OIDC
  contents: read  # Required for checking out the repository

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  SOLUTION_PATH: 'src/hippo-booking.sln'
  API_PROJECT_PATH: 'src/api/Hippo.Booking.API/Hippo.Booking.API.csproj'
  WEB_PROJECT_PATH: 'src/web/hippo-booking'
  API_ARTIFACT_NAME: 'api-artifact'
  WEB_ARTIFACT_NAME: 'web-artifact'
  AWS_REGION: 'eu-west-1'

jobs:
  build-api:
    name: Build .NET API
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            src/api/**/packages.lock.json
            src/e2e/**/packages.lock.json

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Build .NET API
        run: dotnet build ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore

      - name: Publish .NET API
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-build --output ./publish

      - name: Set version variable
        id: version
        run: echo "version=v1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Zip publish artifact
        run: zip -r ${{ env.API_ARTIFACT_NAME }}.zip ./publish

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ env.API_ARTIFACT_NAME }}.zip

  build-web:
    name: Build React Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WEB_PROJECT_PATH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.WEB_PROJECT_PATH }}/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}/yarn.lock', env.WEB_PROJECT_PATH)) }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn dependencies
        run: yarn install --immutable

      - name: Build React app
        run: yarn build
        env:
          VITE_API_BASE_URL: 'placeholder'
          VITE_GOOGLE_CLIENT_ID: 'placeholder'

      - name: Upload Frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WEB_ARTIFACT_NAME }}
          path: ${{ env.WEB_PROJECT_PATH }}/dist

  unit-tests:
    name: Run .NET Unit Tests
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            src/api/**/packages.lock.json
            src/e2e/**/packages.lock.json

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Run Unit Tests
        run: dotnet test ${{ env.SOLUTION_PATH }} --no-build --configuration Release --filter "FullyQualifiedName~.Core.Tests|FullyQualifiedName~.Application.Tests|FullyQualifiedName~.Infrastructure.Tests"

  frontend-tests:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    needs: build-web
    defaults:
      run:
        working-directory: ${{ env.WEB_PROJECT_PATH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.WEB_PROJECT_PATH }}/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}/yarn.lock', env.WEB_PROJECT_PATH)) }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn dependencies
        run: yarn install --immutable

      - name: Run Vitest
        run: yarn ci-test

  integration-tests:
    name: Run .NET Integration Tests
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start PostgreSQL container
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml up -d --wait

      - name: Verify services are running
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml ps

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            src/api/**/packages.lock.json
            src/e2e/**/packages.lock.json

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Run Integration Tests
        env:
          ConnectionStrings__HippoBookingDbContext: "Server=localhost;Port=5432;Database=HippoBooking_Integration;User Id=postgres;Password=postgres;TrustServerCertificate=True"
          ConnectionStrings__HangfireDbContext: "Server=localhost;Port=5432;Database=Hangfire_Integration;User Id=postgres;Password=postgres"
        run: dotnet test src/api/tests/Hippo.Booking.Integration.Tests/Hippo.Booking.Integration.Tests.csproj --no-build --configuration Release

  e2e-tests:
    name: Run End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-api, build-web]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start full application stack
        run: docker compose -f src/infrastructure/docker/docker-compose-ci.yml -f src/infrastructure/docker/docker-compose-services.yml up --build -d --wait

      - name: Verify services are running
        run: |
          echo "Waiting for all services to stabilize..."
          sleep 15
          docker compose -f src/infrastructure/docker/docker-compose-ci.yml -f src/infrastructure/docker/docker-compose-services.yml ps

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            src/api/**/packages.lock.json
            src/e2e/**/packages.lock.json

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: Build E2E test project to generate Playwright script
        run: dotnet build src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj --no-restore

      - name: Install Playwright browsers
        run: pwsh src/e2e/Hippo.Booking.E2ETests/bin/Release/net8.0/playwright.ps1 install

      - name: Run E2E Tests
        env:
          Urls__BaseUrl: "http://localhost:5173/"
          ConnectionStrings__Database: "Server=localhost;Port=5432;User Id=postgres;Password=postgres;Database=HippoBooking_EndToEnd"
        run: dotnet test src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj --no-build --configuration Release

  provision-infra:
    name: Provision AWS Infrastructure
    runs-on: ubuntu-latest
    needs: [unit-tests, frontend-tests, integration-tests, e2e-tests]
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    outputs:
      tf_outputs: ${{ steps.tf-apply.outputs.tf_output }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: tf-init
        working-directory: src/infrastructure/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TERRAFORM_S3_BUCKET }}" \
            -backend-config="key=terraform-state/${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        id: tf-apply
        working-directory: src/infrastructure/terraform
        run: |
          terraform apply -auto-approve \
            -var-file="${{ github.event.inputs.environment }}.tfvars" \
            -var="github_repo=${{ github.repository }}" \
            -var="github_access_token=${{ secrets.GITHUB_TOKEN }}" \
            -var="google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            -var="slack_token=${{ secrets.SLACK_TOKEN }}" \
            -var="slack_signing_secret=${{ secrets.SLACK_SIGNING_SECRET }}" \
            -var="slack_channel_email=${{ secrets.SLACK_CHANNEL_EMAIL }}" \
            -var="google_credentials=${{ secrets.GOOGLE_CREDENTIALS_JSON }}"
          
          echo "tf_output=$(terraform output -json)" >> $GITHUB_OUTPUT

  deploy-api:
    name: Deploy API to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: [provision-infra, build-api]
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    env:
      TF_OUTPUTS: ${{ needs.provision-infra.outputs.tf_outputs }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}

      - name: Set deployment variables
        id: vars
        run: |
          echo "EB_APP_NAME=$(echo $TF_OUTPUTS | jq -r .elastic_beanstalk_application_name.value)" >> $GITHUB_ENV
          echo "EB_ENV_NAME=$(echo $TF_OUTPUTS | jq -r .elastic_beanstalk_environment_name.value)" >> $GITHUB_ENV
          echo "VERSION_LABEL=${{ needs.build-api.outputs.version }}" >> $GITHUB_ENV
          echo "S3_BUCKET=${{ secrets.AWS_EB_S3_BUCKET }}" >> $GITHUB_ENV
          echo "S3_KEY=${{ env.API_ARTIFACT_NAME }}-${{ needs.build-api.outputs.version }}.zip" >> $GITHUB_ENV

      - name: Upload to S3 for Elastic Beanstalk
        run: aws s3 cp ${{ env.API_ARTIFACT_NAME }}.zip s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}

      - name: Create Elastic Beanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.EB_APP_NAME }}" \
            --version-label "${{ env.VERSION_LABEL }}" \
            --source-bundle S3Bucket="${{ env.S3_BUCKET }}",S3Key="${{ env.S3_KEY }}"

      - name: Deploy to Elastic Beanstalk Environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ env.EB_ENV_NAME }}" \
            --version-label "${{ env.VERSION_LABEL }}"

  deploy-web:
    name: Deploy Frontend to Amplify
    runs-on: ubuntu-latest
    needs: provision-infra
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    env:
      TF_OUTPUTS: ${{ needs.provision-infra.outputs.tf_outputs }}
    steps:
      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Amplify App ID
        id: amplify
        run: |
          APP_NAME=$(echo $TF_OUTPUTS | jq -r .amplify_app_name.value)
          APP_ID=$(aws amplify list-apps | jq -r --arg APP_NAME "$APP_NAME" '.apps[] | select(.name==$APP_NAME) | .appId')
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV

      - name: Start Amplify Deployment
        run: |
          aws amplify start-job \
            --app-id ${{ env.APP_ID }} \
            --branch-name main \
            --job-type RELEASE
