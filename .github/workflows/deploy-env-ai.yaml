name: .NET and React CI/CD for AWS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Test
          - Production

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  API_PROJECT_PATH: 'api/Hippo.Booking.API/Hippo.Booking.API.csproj'
  API_OUTPUT_PATH: 'api-publish'
  WEB_APP_PATH: 'web/hippo-booking'
  SOLUTION_FILE_PATH: 'src/hippo-booking.sln'
  AWS_REGION: 'eu-west-1'

permissions:
  id-token: write
  contents: read

jobs:
  build_and_unit_test:
    name: Build and Run Unit Tests
    runs-on: ubuntu-latest
    outputs:
      api_artifact_name: ${{ steps.set-artifact-name.outputs.name }}
      api_artifact_path: ${{ steps.set-artifact-name.outputs.path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build .NET Solution
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore

      - name: Run .NET Unit Tests
        run: >
          dotnet test ${{ env.SOLUTION_FILE_PATH }}
          --configuration Release
          --no-build
          --filter "TestCategory!=Integration&TestCategory!=E2E"

      - name: Enable Corepack for Yarn
        working-directory: ${{ env.WEB_APP_PATH }}
        run: corepack enable

      - name: Install Frontend Dependencies
        working-directory: ${{ env.WEB_APP_PATH }}
        run: yarn install --immutable

      - name: Run Frontend Tests
        working-directory: ${{ env.WEB_APP_PATH }}
        run: yarn ci-test

      - name: Publish .NET API
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --output ${{ env.API_OUTPUT_PATH }}

      - name: Set API Artifact Name
        id: set-artifact-name
        run: |
          ARTIFACT_NAME="api-artifact-${{ github.run_id }}"
          echo "name=$ARTIFACT_NAME" >> "$GITHUB_OUTPUT"
          echo "path=./${{ env.API_OUTPUT_PATH }}" >> "$GITHUB_OUTPUT"

      - name: Upload API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.name }}
          path: ${{ steps.set-artifact-name.outputs.path }}

  integration_test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: build_and_unit_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Start PostgreSQL for Integration Tests
        working-directory: ./src/infrastructure/docker
        run: docker compose -f docker-compose-ci.yml up -d --wait

      - name: Verify Docker Containers are Running
        working-directory: ./src/infrastructure/docker
        run: docker compose -f docker-compose-ci.yml ps

      - name: Run .NET Integration Tests
        run: >
          dotnet test src/api/tests/Hippo.Booking.Integration.Tests/Hippo.Booking.Integration.Tests.csproj
          --configuration Release
        env:
          ConnectionStrings__HippoBookingDbContext: "Host=localhost;Port=5432;Database=HippoBooking_Integration;Username=postgres;Password=postgres"

  e2e_test:
    name: Run End-to-End Tests
    runs-on: ubuntu-latest
    needs: build_and_unit_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Start Full Application Stack for E2E Tests
        working-directory: ./src/infrastructure/docker
        run: docker compose -f docker-compose-ci.yml -f docker-compose-services.yml up -d --build --wait

      - name: Verify Docker Containers are Running
        working-directory: ./src/infrastructure/docker
        run: docker compose -f docker-compose-ci.yml -f docker-compose-services.yml ps

      - name: Run .NET E2E Tests
        run: >
          dotnet test src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj
          --configuration Release
        env:
          Urls__BaseUrl: "http://localhost:5173/"
          ConnectionStrings__Database: "Host=localhost;Port=5432;User Id=postgres;Password=postgres;Database=HippoBooking_EndToEnd"

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [integration_test, e2e_test]
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Set Environment Variables
        id: set-env
        run: |
          ENV_LOWER=$(echo "${{ inputs.environment }}" | tr '[:upper:]' '[:lower:]')
          echo "tf_workspace=${ENV_LOWER}" >> "$GITHUB_OUTPUT"
          echo "tf_vars_file=src/infrastructure/terraform/${{ inputs.environment }}.tfvars" >> "$GITHUB_OUTPUT"
          if [ "${{ inputs.environment }}" == "Production" ]; then
            echo "aws_role=${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}" >> "$GITHUB_OUTPUT"
            echo "tf_backend_config=${{ secrets.TERRAFORM_BACKEND_CONFIG_PROD }}" >> "$GITHUB_OUTPUT"
          else
            echo "aws_role=${{ secrets.AWS_ROLE_TO_ASSUME_TEST }}" >> "$GITHUB_OUTPUT"
            echo "tf_backend_config=${{ secrets.TERRAFORM_BACKEND_CONFIG_TEST }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set-env.outputs.aws_role }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: tf-init
        working-directory: src/infrastructure/terraform
        run: |
          echo "${{ steps.set-env.outputs.tf_backend_config }}" > backend.config
          terraform init -backend-config=backend.config

      - name: Terraform Workspace
        working-directory: src/infrastructure/terraform
        run: terraform workspace select ${{ steps.set-env.outputs.tf_workspace }} || terraform workspace new ${{ steps.set-env.outputs.tf_workspace }}

      - name: Terraform Apply
        working-directory: src/infrastructure/terraform
        run: terraform apply -var-file=${{ steps.set-env.outputs.tf_vars_file }} -auto-approve

      - name: Get Terraform Outputs
        id: tf-out
        working-directory: src/infrastructure/terraform
        run: |
          echo "eb_app_name=$(terraform output -raw elastic_beanstalk_application_name)" >> "$GITHUB_OUTPUT"
          echo "eb_env_name=$(terraform output -raw elastic_beanstalk_environment_name)" >> "$GITHUB_OUTPUT"
          echo "amplify_app_name=$(terraform output -raw amplify_app_name)" >> "$GITHUB_OUTPUT"

      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_and_unit_test.outputs.api_artifact_name }}
          path: deploy-package

      - name: Create API deployment package
        run: |
          cd deploy-package
          zip -r ../api-deployment-package.zip .

      - name: Upload API to S3
        id: upload-s3
        run: |
          S3_BUCKET="elasticbeanstalk-${{ env.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}"
          S3_KEY="hippo-booking/api-v${{ github.run_number }}.zip"
          aws s3 cp api-deployment-package.zip s3://${S3_BUCKET}/${S3_KEY}
          echo "s3_bucket=$S3_BUCKET" >> "$GITHUB_OUTPUT"
          echo "s3_key=$S3_KEY" >> "$GITHUB_OUTPUT"

      - name: Create Elastic Beanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${{ steps.tf-out.outputs.eb_app_name }}" \
            --version-label "v${{ github.run_number }}" \
            --source-bundle S3Bucket="${{ steps.upload-s3.outputs.s3_bucket }}",S3Key="${{ steps.upload-s3.outputs.s3_key }}"

      - name: Deploy API to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ steps.tf-out.outputs.eb_env_name }}" \
            --version-label "v${{ github.run_number }}"

      - name: Trigger Frontend Deployment on AWS Amplify
        run: |
          APP_ID=$(aws amplify list-apps --query "apps[?name=='${{ steps.tf-out.outputs.amplify_app_name }}'].appId" --output text)
          aws amplify start-job --app-id $APP_ID --branch-name main --job-type "RELEASE"

      - name: Echo Deployment URLs
        run: |
          EB_URL=$(aws elasticbeanstalk describe-environments --environment-names "${{ steps.tf-out.outputs.eb_env_name }}" --query "Environments[0].CNAME" --output text)
          AMPLIFY_APP_ID=$(aws amplify list-apps --query "apps[?name=='${{ steps.tf-out.outputs.amplify_app_name }}'].appId" --output text)
          AMPLIFY_URL=$(aws amplify get-branch --app-id $AMPLIFY_APP_ID --branch-name main --query "branch.displayNames[0]" --output text)
          echo "Backend API deployed to: https://${EB_URL}"
          echo "Frontend App deployed to: https://${AMPLIFY_URL}"
