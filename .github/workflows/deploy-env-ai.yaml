name: .NET & React CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Test
          - Production

permissions:
  id-token: write # Required for AWS OIDC connection
  contents: read  # Required to checkout the repository

env:
  # === configurable variables ===
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  AWS_REGION: 'eu-west-1'
  # === solution paths ===
  SOLUTION_FILE_PATH: 'src/hippo-booking.sln'
  API_PROJECT_PATH: 'src/api/Hippo.Booking.API'
  API_PUBLISH_PATH: 'api-publish'
  WEB_PROJECT_PATH: 'src/web/hippo-booking'
  WEB_BUILD_PATH: 'src/web/hippo-booking/dist'
  INFRA_PATH: 'src/infrastructure'
  # === test project paths ===
  UNIT_TESTS_PATH: 'src/api/tests'
  INTEGRATION_TESTS_PROJECT: 'src/api/tests/Hippo.Booking.Integration.Tests/Hippo.Booking.Integration.Tests.csproj'
  E2E_TESTS_PROJECT: 'src/e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj'
  # === docker compose files ===
  DOCKER_COMPOSE_CI_FILE: 'src/infrastructure/docker/docker-compose-ci.yml'
  DOCKER_COMPOSE_SERVICES_FILE: 'src/infrastructure/docker/docker-compose-services.yml'

jobs:
  build_and_test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    outputs:
      env_suffix: ${{ steps.set_env.outputs.suffix }}
      environment_name: ${{ steps.set_env.outputs.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Environment Suffix
        id: set_env
        run: |
          if [ "${{ github.event.inputs.environment }}" == "Production" ]; then
            echo "suffix=prod" >> $GITHUB_OUTPUT
            echo "name=Production" >> $GITHUB_OUTPUT
          else
            echo "suffix=test" >> $GITHUB_OUTPUT
            echo "name=Test" >> $GITHUB_OUTPUT
          fi

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '${{ env.WEB_PROJECT_PATH }}/yarn.lock'

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Install frontend dependencies
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: |
          corepack enable
          yarn install --immutable

      - name: Build all components
        run: |
          echo "Building .NET Solution..."
          dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore
          echo "Building React Frontend..."
          yarn --cwd ${{ env.WEB_PROJECT_PATH }} build

      - name: Run .NET Unit Tests
        run: dotnet test ${{ env.UNIT_TESTS_PATH }} --configuration Release --no-build --filter "TestCategory!=Integration&TestCategory!=E2E"

      - name: Run Frontend Unit Tests (Vitest)
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: yarn test run

      - name: Start services for Integration Tests
        run: docker compose -f ${{ env.DOCKER_COMPOSE_CI_FILE }} up -d

      - name: Run .NET Integration Tests
        env:
          ConnectionStrings__HippoBookingDbContext: "Server=localhost;Port=5432;Database=HippoBooking_Integration;User Id=postgres;Password=postgres;TrustServerCertificate=True"
        run: dotnet test ${{ env.INTEGRATION_TESTS_PROJECT }} --configuration Release --no-build

      - name: Stop services after Integration Tests
        if: always()
        run: docker compose -f ${{ env.DOCKER_COMPOSE_CI_FILE }} down

      - name: Start full stack for End-to-End Tests
        run: docker compose -f ${{ env.DOCKER_COMPOSE_CI_FILE }} -f ${{ env.DOCKER_COMPOSE_SERVICES_FILE }} up -d --build --wait

      - name: Run Playwright E2E Tests
        run: dotnet test ${{ env.E2E_TESTS_PROJECT }} --configuration Release --no-build

      - name: Stop full stack after End-to-End Tests
        if: always()
        run: docker compose -f ${{ env.DOCKER_COMPOSE_CI_FILE }} -f ${{ env.DOCKER_COMPOSE_SERVICES_FILE }} down

      - name: Publish .NET API artifact
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-build -o ${{ env.API_PUBLISH_PATH }}

      - name: Package API artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-artifact
          path: ${{ env.API_PUBLISH_PATH }}

      - name: Package Web artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-artifact
          path: ${{ env.WEB_BUILD_PATH }}

  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    needs: build_and_test
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # e.g., arn:aws:iam::123456789012:role/GitHubActionsDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: api-artifact
          path: ${{ env.API_PUBLISH_PATH }}

      - name: Zip API artifact for Elastic Beanstalk
        run: zip -r api-deployment-package.zip .
        working-directory: ${{ env.API_PUBLISH_PATH }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        env:
          # These secrets must be configured in your GitHub repository settings
          AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }} # Optional if role has permissions on S3 backend
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }} # Optional if role has permissions on S3 backend
        run: >
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          -backend-config="key=terraform.tfstate"
          -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ${{ env.INFRA_PATH }}/terraform

      - name: Terraform Workspace and Apply
        id: apply
        env:
          # These secrets must be configured in your GitHub repository settings
          TF_VAR_github_access_token: ${{ secrets.GH_ACCESS_TOKEN_FOR_AMPLIFY }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_slack_token: ${{ secrets.SLACK_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.SLACK_SIGNING_SECRET }}
          TF_VAR_slack_channel_email: ${{ secrets.SLACK_CHANNEL_EMAIL }}
          TF_VAR_github_repo: ${{ github.repositoryUrl }}
        run: |
          terraform workspace select ${{ needs.build_and_test.outputs.environment_name }} || terraform workspace new ${{ needs.build_and_test.outputs.environment_name }}
          terraform apply -auto-approve -var-file="${{ needs.build_and_test.outputs.environment_name }}.tfvars"
        working-directory: ${{ env.INFRA_PATH }}/terraform

      - name: Deploy API to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ env.AWS_SESSION_TOKEN }}
          application_name: hippo-booking-api-${{ needs.build_and_test.outputs.env_suffix }}
          environment_name: hippo-booking-api-env-${{ needs.build_and_test.outputs.env_suffix }}
          version_label: ${{ github.sha }}-${{ github.run_number }}
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.API_PUBLISH_PATH }}/api-deployment-package.zip

      - name: Trigger Frontend deployment on AWS Amplify
        run: |
          APP_ID=$(aws amplify list-apps --query "apps[?name=='hippo-booking-front-end-${{ needs.build_and_test.outputs.env_suffix }}'].appId" --output text)
          if [ -z "$APP_ID" ]; then
            echo "Amplify App ID not found!"
            exit 1
          fi
          echo "Starting Amplify deployment for App ID: $APP_ID"
          aws amplify start-job --app-id $APP_ID --branch-name main --job-type RELEASE
          echo "Amplify deployment triggered. Monitor deployment status in the AWS Console."
