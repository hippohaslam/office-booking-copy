name: .NET and AWS CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Test
          - Production
        default: 'Test'

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  SOLUTION_FILE: './hippo-booking.sln'
  API_PROJECT_PATH: './api/Hippo.Booking.API/Hippo.Booking.API.csproj'
  WEB_PROJECT_PATH: './web/hippo-booking'
  AWS_REGION: 'eu-west-1'
  TF_VERSION: 'latest'
  API_ARTIFACT_NAME: 'api-publish'
  WEB_ARTIFACT_NAME: 'web-build'

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ${{ env.WEB_PROJECT_PATH }}/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('${{ env.WEB_PROJECT_PATH }}/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }} --locked-mode

      - name: Build .NET API
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

      - name: Publish .NET API
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-build -o ./${{ env.API_ARTIFACT_NAME }}

      - name: Zip API artifact for deployment
        run: zip -r ${{ env.API_ARTIFACT_NAME }}.zip ./${{ env.API_ARTIFACT_NAME }}

      - name: Upload API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: ${{ env.API_ARTIFACT_NAME }}.zip

      - name: Install Frontend Dependencies
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: |
          corepack enable
          yarn install --immutable

      - name: Build Frontend Application
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: yarn build:${{ toLower(inputs.environment) }}

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WEB_ARTIFACT_NAME }}
          path: ${{ env.WEB_PROJECT_PATH }}/dist

  unit-test:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ${{ env.WEB_PROJECT_PATH }}/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('${{ env.WEB_PROJECT_PATH }}/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }} --locked-mode

      - name: Run Core Unit Tests
        run: dotnet test ./api/tests/Hippo.Booking.Core.Tests/Hippo.Booking.Core.Tests.csproj --no-build -c Release

      - name: Run Application Unit Tests
        run: dotnet test ./api/tests/Hippo.Booking.Application.Tests/Hippo.Booking.Application.Tests.csproj --no-build -c Release

      - name: Run Infrastructure Unit Tests
        run: dotnet test ./api/tests/Hippo.Booking.Infrastructure.Tests/Hippo.Booking.Infrastructure.Tests.csproj --no-build -c Release
      
      - name: Install Frontend Dependencies
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: |
          corepack enable
          yarn install --immutable
          
      - name: Run Frontend Unit Tests
        working-directory: ${{ env.WEB_PROJECT_PATH }}
        run: yarn ci-test

  integration-test:
    name: Run Integration Tests
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }} --locked-mode

      - name: Run .NET Integration Tests
        env:
          ConnectionStrings__HippoBookingDbContext: "Host=localhost;Port=${{ job.services.postgres.ports[5432] }};Database=HippoBooking_Integration;Username=postgres;Password=postgres"
        run: dotnet test ./api/tests/Hippo.Booking.Integration.Tests/Hippo.Booking.Integration.Tests.csproj --no-build -c Release

  e2e-test:
    name: Run End-to-End Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Start Application Stack
        run: |
          docker compose -f ./infrastructure/docker/docker-compose-ci.yml -f ./infrastructure/docker/docker-compose-services.yml up -d --wait

      - name: Verify services are running
        run: docker compose -f ./infrastructure/docker/docker-compose-ci.yml -f ./infrastructure/docker/docker-compose-services.yml ps

      - name: Restore and Run .NET E2E Tests
        run: dotnet test ./e2e/Hippo.Booking.E2ETests/Hippo.Booking.E2ETests.csproj -c Release

      - name: Stop Application Stack
        if: always()
        run: docker compose -f ./infrastructure/docker/docker-compose-ci.yml -f ./infrastructure/docker/docker-compose-services.yml down

  deploy:
    name: Deploy to ${{ inputs.environment }}
    needs: [unit-test, integration-test, e2e-test]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=hippo-booking/terraform-${{ toLower(inputs.environment) }}.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./infrastructure/terraform
        env:
          TF_VAR_github_access_token: ${{ secrets.TF_VAR_GITHUB_ACCESS_TOKEN }}
          TF_VAR_google_client_secret: ${{ secrets.TF_VAR_GOOGLE_CLIENT_SECRET }}
          TF_VAR_slack_token: ${{ secrets.TF_VAR_SLACK_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.TF_VAR_SLACK_SIGNING_SECRET }}
          TF_VAR_github_repo: ${{ github.repositoryUrl }}
          TF_VAR_slack_channel_email: ${{ secrets.TF_VAR_SLACK_CHANNEL_EMAIL }}
          TF_VAR_google_credentials: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -var-file="${{ inputs.environment }}.tfvars"
        working-directory: ./infrastructure/terraform

      - name: Get Terraform Outputs
        id: tf-outputs
        run: echo "outputs=$(terraform output -json)" >> $GITHUB_OUTPUT
        working-directory: ./infrastructure/terraform
      
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.API_ARTIFACT_NAME }}
          path: .

      - name: Deploy API to Elastic Beanstalk
        env:
          EB_APP_NAME: ${{ fromJson(steps.tf-outputs.outputs.elastic_beanstalk_application_name).value }}
          EB_ENV_NAME: ${{ fromJson(steps.tf-outputs.outputs.elastic_beanstalk_environment_name).value }}
          VERSION_LABEL: "v${{ github.run_id }}-${{ github.run_attempt }}"
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          S3_BUCKET="elasticbeanstalk-${{ env.AWS_REGION }}-${ACCOUNT_ID}"
          S3_KEY="${EB_APP_NAME}/${VERSION_LABEL}.zip"

          echo "Uploading to s3://${S3_BUCKET}/${S3_KEY}"
          aws s3 cp ./${{ env.API_ARTIFACT_NAME }}.zip s3://${S3_BUCKET}/${S3_KEY}

          echo "Creating Elastic Beanstalk application version ${VERSION_LABEL}"
          aws elasticbeanstalk create-application-version \
            --application-name "${EB_APP_NAME}" \
            --version-label "${VERSION_LABEL}" \
            --source-bundle S3Bucket="${S3_BUCKET}",S3Key="${S3_KEY}"

          echo "Updating environment ${EB_ENV_NAME} to version ${VERSION_LABEL}"
          aws elasticbeanstalk update-environment \
            --environment-name "${EB_ENV_NAME}" \
            --version-label "${VERSION_LABEL}"

          echo "Waiting for environment update to complete..."
          aws elasticbeanstalk wait environment-updated \
            --environment-name "${EB_ENV_NAME}" \
            --version-label "${VERSION_LABEL}"
          echo "Deployment to Elastic Beanstalk successful!"
      
      - name: Trigger Frontend Deploy to Amplify
        env:
          AMPLIFY_APP_ID: ${{ fromJson(steps.tf-outputs.outputs.amplify_app_name).value.id }}
          BRANCH_NAME: 'main'
        run: |
          echo "Starting Amplify deployment for App ID: ${AMPLIFY_APP_ID} on branch ${BRANCH_NAME}"
          aws amplify start-job \
            --app-id "${AMPLIFY_APP_ID}" \
            --branch-name "${BRANCH_NAME}" \
            --job-type 'RELEASE'
          echo "Amplify deployment triggered."
